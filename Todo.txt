add companies compensation
making a email setup and generate response from ai
make the home page


Bug: when we add new email then results data needs to fetch again




import { motion } from "framer-motion"
import { Button } from "@/components/ui/button"

export default function CoolHero() {
  return (
    <section className="relative overflow-hidden bg-gradient-to-b from-blue-100 to-white dark:from-gray-900 dark:to-gray-800 min-h-screen flex items-center justify-center">
      {/* Animated background shapes */}
      <BackgroundShapes />
      
      {/* Hero content */}
      <div className="relative z-10 text-center px-4 sm:px-6 lg:px-8">
        <motion.h1 
          className="text-4xl sm:text-5xl md:text-6xl font-extrabold text-gray-900 dark:text-white mb-6"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
        >
          Welcome to the Future
        </motion.h1>
        <motion.p 
          className="mt-3 max-w-md mx-auto text-base sm:text-lg md:mt-5 md:text-xl text-gray-600 dark:text-gray-300 mb-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
        >
          Experience innovation like never before. Dive into a world of endless possibilities.
        </motion.p>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.4 }}
        >
          <Button size="lg" className="mr-4">Get Started</Button>
          <Button size="lg" variant="outline">Learn More</Button>
        </motion.div>
      </div>
    </section>
  )
}

function BackgroundShapes() {
  return (
    <>
      <motion.div
        className="absolute top-1/4 left-1/4 w-72 h-72 bg-purple-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 dark:opacity-30"
        animate={{
          scale: [1, 2, 2, 1, 1],
          rotate: [0, 0, 270, 270, 0],
          borderRadius: ["20%", "20%", "50%", "50%", "20%"],
        }}
        transition={{
          duration: 12,
          ease: "easeInOut",
          times: [0, 0.2, 0.5, 0.8, 1],
          repeat: Infinity,
          repeatType: "reverse"
        }}
      />
      <motion.div
        className="absolute top-1/3 right-1/4 w-72 h-72 bg-yellow-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 dark:opacity-30"
        animate={{
          scale: [1, 2, 2, 1, 1],
          rotate: [0, 0, 270, 270, 0],
          borderRadius: ["20%", "20%", "50%", "50%", "20%"],
        }}
        transition={{
          duration: 12,
          ease: "easeInOut",
          times: [0, 0.2, 0.5, 0.8, 1],
          repeat: Infinity,
          repeatType: "reverse",
          delay: 0.5
        }}
      />
      <motion.div
        className="absolute bottom-1/4 right-1/3 w-72 h-72 bg-pink-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 dark:opacity-30"
        animate={{
          scale: [1, 2, 2, 1, 1],
          rotate: [0, 0, 270, 270, 0],
          borderRadius: ["20%", "20%", "50%", "50%", "20%"],
        }}
        transition={{
          duration: 12,
          ease: "easeInOut",
          times: [0, 0.2, 0.5, 0.8, 1],
          repeat: Infinity,
          repeatType: "reverse",
          delay: 1
        }}
      />
    </>
  )
}









3d welcome text 
'use client'

import { Button } from "@/components/ui/button"
import { Canvas, useFrame, extend, useThree } from "@react-three/fiber"
import { Text, OrbitControls } from "@react-three/drei"
import { useRef } from "react"
import * as THREE from 'three'
import { EffectComposer, RenderPass, UnrealBloomPass } from 'three-stdlib'

extend({ EffectComposer, RenderPass, UnrealBloomPass })

function FloatingText() {
  const textRef = useRef<THREE.Mesh>(null!)

  useFrame((state) => {
    const time = state.clock.getElapsedTime()
    textRef.current.position.y = Math.sin(time) * 0.1
    textRef.current.rotation.x = Math.sin(time * 0.5) * 0.1
    textRef.current.rotation.y = Math.sin(time * 0.3) * 0.1
  })

  return (
    <Text
      ref={textRef}
      fontSize={0.5}
      color="#ffffff"
      anchorX="center"
      anchorY="middle"
    >
      WELCOME TO THE FUTURE
    </Text>
  )
}

function Particles() {
  const particlesRef = useRef<THREE.Points>(null!)

  useFrame((state) => {
    const time = state.clock.getElapsedTime()
    particlesRef.current.rotation.y = time * 0.05
  })

  const particlesCount = 5000
  const positions = new Float32Array(particlesCount * 3)

  for (let i = 0; i < particlesCount * 3; i++) {
    positions[i] = (Math.random() - 0.5) * 10
  }

  return (
    <points ref={particlesRef}>
      <bufferGeometry>
        <bufferAttribute
          attach="attributes-position"
          count={particlesCount}
          array={positions}
          itemSize={3}
        />
      </bufferGeometry>
      <pointsMaterial size={0.01} color="#8352FD" />
    </points>
  )
}

function Effects() {
  const { gl, scene, camera, size } = useThree()
  const composerRef = useRef<EffectComposer>()

  useFrame(() => {
    if (!composerRef.current) {
      const composer = new EffectComposer(gl)
      const renderPass = new RenderPass(scene, camera)
      composer.addPass(renderPass)

      const bloomPass = new UnrealBloomPass(
        new THREE.Vector2(size.width, size.height),
        1.5,
        0.4,
        0.85
      )
      composer.addPass(bloomPass)

      composerRef.current = composer
    }
    composerRef.current.render()
  }, 1)

  return null
}

export default function CoolHero() {
  return (
    <div className="relative w-full h-screen overflow-hidden bg-gradient-to-b from-purple-900 to-indigo-900">
      <Canvas className="absolute inset-0">
        <ambientLight intensity={0.5} />
        <directionalLight position={[10, 10, 5]} intensity={1} />
        <OrbitControls enableZoom={false} enablePan={false} enableRotate={true} />
        <Particles />
        <FloatingText />
        <Effects />
      </Canvas>
      
      <div className="relative z-10 flex flex-col items-center justify-center h-full text-center px-4 sm:px-6 lg:px-8">
        <h1 className="text-4xl sm:text-5xl md:text-6xl font-extrabold text-white mb-6">
          Innovate Beyond Limits
        </h1>
        <p className="mt-3 max-w-md mx-auto text-base sm:text-lg md:mt-5 md:text-xl text-purple-200 mb-8">
          Experience the next generation of technology. Dive into a world where imagination meets reality.
        </p>
        <div>
          <Button size="lg" className="mr-4 bg-purple-600 hover:bg-purple-700">Get Started</Button>
          <Button size="lg" variant="outline" className="text-white border-white hover:bg-white hover:text-purple-900">Learn More</Button>
        </div>
      </div>
    </div>
  )
}






3d landing page 

'use client'

import { Button } from "@/components/ui/button"
import { Canvas, useFrame, extend, useThree } from "@react-three/fiber"
import { OrbitControls } from "@react-three/drei"
import { useRef, useEffect } from "react"
import * as THREE from 'three'
import { EffectComposer, RenderPass, UnrealBloomPass } from 'three-stdlib'

extend({ EffectComposer, RenderPass, UnrealBloomPass })

function Particles() {
  const particlesRef = useRef<THREE.Points>(null!)
  const particlesGeometryRef = useRef<THREE.BufferGeometry>(null!)

  useEffect(() => {
    if (particlesGeometryRef.current) {
      const particlesGeometry = particlesGeometryRef.current
      const particlesCount = 5000
      const positions = new Float32Array(particlesCount * 3)

      for (let i = 0; i < particlesCount * 3; i++) {
        positions[i] = (Math.random() - 0.5) * 10
      }

      particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))
    }
  }, [])

  useFrame((state) => {
    const time = state.clock.getElapsedTime()
    particlesRef.current.rotation.y = time * 0.1
  })

  return (
    <points ref={particlesRef}>
      <bufferGeometry ref={particlesGeometryRef} />
      <pointsMaterial size={0.02} color="#8352FD" />
    </points>
  )
}

function Effects() {
  const { gl, scene, camera, size } = useThree()
  const composerRef = useRef<EffectComposer>()

  useEffect(() => {
    const composer = new EffectComposer(gl)
    const renderPass = new RenderPass(scene, camera)
    composer.addPass(renderPass)

    const bloomPass = new UnrealBloomPass(
      new THREE.Vector2(size.width, size.height),
      1.5,
      0.4,
      0.85
    )
    composer.addPass(bloomPass)

    composerRef.current = composer
  }, [gl, scene, camera, size])

  useFrame(() => {
    composerRef.current?.render()
  }, 1)

  return null
}

export default function CoolHero() {
  return (
    <div className="relative w-full h-screen overflow-hidden bg-gradient-to-b from-purple-900 to-indigo-900">
      <Canvas className="absolute inset-0">
        <ambientLight intensity={0.5} />
        <directionalLight position={[10, 10, 5]} intensity={1} />
        <OrbitControls enableZoom={false} enablePan={false} enableRotate={true} />
        <Particles />
        <Effects />
      </Canvas>
      
      <div className="relative z-10 flex flex-col items-center justify-center h-full text-center px-4 sm:px-6 lg:px-8">
        <h1 className="text-4xl sm:text-5xl md:text-6xl font-extrabold text-white mb-6">
          Welcome to the Future
        </h1>
        <p className="mt-3 max-w-md mx-auto text-base sm:text-lg md:mt-5 md:text-xl text-purple-200 mb-8">
          Experience innovation in 3D. Dive into a world of endless possibilities.
        </p>
        <div>
          <Button size="lg" className="mr-4 bg-purple-600 hover:bg-purple-700">Get Started</Button>
          <Button size="lg" variant="outline" className="text-white border-white hover:bg-white hover:text-purple-900">Learn More</Button>
        </div>
      </div>
    </div>
  )
}